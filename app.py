from flask import Flask, request, jsonify
import openai
import os
import requests
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta

app = Flask(__name__)

openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()
print("[INFO] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler –∑–∞–ø—É—â–µ–Ω")

@app.route("/", methods=["POST"])
def handle_request():
    print("[OPENAI DEBUG] –ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    data = request.json
    user_info = data.get("user_info", "No user data provided.")

    prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {user_info}, —Å–æ—Å—Ç–∞–≤—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, –ø–∏—Ç–∞–Ω–∏—é –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∏–≤—ã—á–∫–∏, —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=500
        )
        return jsonify({"result": response.choices[0].message.content})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/", methods=["GET"])
def health_check():
    return "ü§ñ HealthMate AI is live", 200

def send_reminder(user_id, message):
    print(f"[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message}")
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": user_id,
        "text": message
    }
    try:
        resp = requests.post(url, json=payload)
        if resp.status_code == 200:
            print(f"[SUCCESS] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: —Å—Ç–∞—Ç—É—Å {resp.status_code}, –æ—Ç–≤–µ—Ç: {resp.text}")
    except Exception as e:
        print(f"[EXCEPTION] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

@app.route("/schedule_reminder", methods=["POST"])
def schedule_reminder():
    data = request.json
    try:
        delay_minutes = int(data.get("delay_minutes", "60"))
    except (ValueError, TypeError):
        return jsonify({"error": "delay_minutes –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"}), 400

    user_id = data.get("user_id")
    message = data.get("message", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç HealthMate AI!")

    if not user_id:
        return jsonify({"error": "user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}), 400

    run_time = datetime.now() + timedelta(minutes=delay_minutes)
    job_id = f"reminder_{user_id}_{datetime.now().timestamp()}"

    scheduler.add_job(
        func=send_reminder,
        trigger="date",
        run_date=run_time,
        args=[user_id, message],
        id=job_id,
        replace_existing=True
    )

    print(f"[SCHEDULER] –ó–∞–¥–∞—á–∞ {job_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞: user_id={user_id}, –∑–∞–¥–µ—Ä–∂–∫–∞={delay_minutes} –º–∏–Ω—É—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ='{message}'")

    return jsonify({"status": "success", "message": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"}), 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
