from flask import Flask, request, jsonify
import openai
import os
import threading
import time

app = Flask(__name__)

openai.api_key = os.getenv("OPENAI_API_KEY")


@app.route("/", methods=["POST"])
def handle_request():
    data = request.json
    user_info = data.get("user_info", "No user data provided.")

    prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {user_info}, —Å–æ—Å—Ç–∞–≤—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, –ø–∏—Ç–∞–Ω–∏—é –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∏–≤—ã—á–∫–∏, —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=500
        )
        return jsonify({"result": response.choices[0].message.content})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/", methods=["GET"])
def health_check():
    return "ü§ñ HealthMate AI is live", 200


def send_reminder_after_delay(delay_minutes, user_id, message):
    # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –∂–¥—ë—Ç delay_minutes, –∑–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ
    time.sleep(delay_minutes * 60)
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å user_id
    # –í –ø—Ä–æ—Å—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message}")
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Suvvy –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–æ–º ‚Äî —Å—é–¥–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤—ã–∑–æ–≤ API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è


@app.route("/schedule_reminder", methods=["POST"])
def schedule_reminder():
    data = request.json

    try:
        delay_minutes = int(data.get("delay_minutes", 60))
    except (ValueError, TypeError):
        return jsonify({"error": "delay_minutes –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"}), 400

    user_id = data.get("user_id")
    message = data.get("message", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç HealthMate AI!")

    if not user_id:
        return jsonify({"error": "user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}), 400

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å —Ç–∞–π–º–µ—Ä–æ–º
    thread = threading.Thread(target=send_reminder_after_delay, args=(delay_minutes, user_id, message))
    thread.daemon = True
    thread.start()

    print(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω—É—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {message}")

    return jsonify({"status": "success", "message": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"}), 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
